
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'setup_BC_PEP_polygons', 'setup_BC_PEP_polygons', 1, 30).
program(2, 'set_up_Configuration_and_start_provenance_tracking', 'setup_BC_PEP_polygons.set_up_Configuration_and_start_provenance_tracking', 9, 14).
program(3, 'read_TA_PEP_SVW_polygon', 'setup_BC_PEP_polygons.read_TA_PEP_SVW_polygon', 15, 22).
program(4, 'write_hs_pep_poly', 'setup_BC_PEP_polygons.write_hs_pep_poly', 23, 29).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'poly_hs_pep', 'setup_BC_PEP_polygons<-poly_hs_pep', 2, 1).
port(2, 'in', 'setup_configuration_file', 'setup_BC_PEP_polygons<-setup_configuration_file', 5, 2).
port(3, 'out', 'poly_hs_pep', 'setup_BC_PEP_polygons->poly_hs_pep', 7, 3).
port(4, 'in', 'setup_configuration_file', 'setup_BC_PEP_polygons.set_up_Configuration_and_start_provenance_tracking<-setup_configuration_file', 10, 4).
port(5, 'out', 'dir_anx', 'setup_BC_PEP_polygons.set_up_Configuration_and_start_provenance_tracking->dir_anx', 12, 5).
port(6, 'out', 'dir_goal', 'setup_BC_PEP_polygons.set_up_Configuration_and_start_provenance_tracking->dir_goal', 13, 6).
port(7, 'param', 'dir_anx', 'setup_BC_PEP_polygons.read_TA_PEP_SVW_polygon<-dir_anx', 16, 5).
port(8, 'in', 'poly_hs_pep', 'setup_BC_PEP_polygons.read_TA_PEP_SVW_polygon<-poly_hs_pep', 17, 7).
port(9, 'out', 'poly_hs_pep', 'setup_BC_PEP_polygons.read_TA_PEP_SVW_polygon->poly_hs_pep', 20, 8).
port(10, 'in', 'poly_hs_pep', 'setup_BC_PEP_polygons.write_hs_pep_poly<-poly_hs_pep', 24, 8).
port(11, 'param', 'dir_goal', 'setup_BC_PEP_polygons.write_hs_pep_poly<-dir_goal', 26, 6).
port(12, 'out', 'poly_hs_pep', 'setup_BC_PEP_polygons.write_hs_pep_poly->poly_hs_pep', 27, 9).

% FACT: port_alias(port_id, alias).
port_alias(1, 'TA_PEP_SVW_polygon').
port_alias(2, 'setup_R').
port_alias(4, 'setup_R').
port_alias(8, 'TA_PEP_SVW_polygon').
port_alias(9, 'hs_pep_poly').
port_alias(10, 'hs_pep_poly').

% FACT: port_uri_template(port_id, uri).
port_uri_template(1, 'file:{dir_anx}/_raw_data/databc/TA_PEP_SVW/TA_PEP_SVW_polygon.shp').
port_uri_template(3, 'file:{dir_goal}/spatial/hs_pep_poly.shp').
port_uri_template(8, 'file:{dir_anx}/_raw_data/databc/TA_PEP_SVW/TA_PEP_SVW_polygon.shp').
port_uri_template(12, 'file:{dir_goal}/spatial/hs_pep_poly.shp').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(2, 4).
has_in_port(3, 7).
has_in_port(3, 8).
has_in_port(4, 10).
has_in_port(4, 11).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 3).
has_out_port(2, 5).
has_out_port(2, 6).
has_out_port(3, 9).
has_out_port(4, 12).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'TA_PEP_SVW_polygon', '[TA_PEP_SVW_polygon]').
data(2, 'setup_R', '[setup_R]').
data(3, 'poly_hs_pep', '[poly_hs_pep]').
data(4, 'setup_R', 'setup_BC_PEP_polygons[setup_R]').
data(5, 'dir_anx', 'setup_BC_PEP_polygons[dir_anx]').
data(6, 'dir_goal', 'setup_BC_PEP_polygons[dir_goal]').
data(7, 'TA_PEP_SVW_polygon', 'setup_BC_PEP_polygons[TA_PEP_SVW_polygon]').
data(8, 'hs_pep_poly', 'setup_BC_PEP_polygons[hs_pep_poly]').
data(9, 'poly_hs_pep', 'setup_BC_PEP_polygons[poly_hs_pep]').

% FACT: channel(channel_id, data_id).
channel(1, 3).
channel(2, 4).
channel(3, 5).
channel(4, 7).
channel(5, 8).
channel(6, 6).
channel(7, 1).
channel(8, 2).
channel(9, 9).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(12, 1).
port_connects_to_channel(4, 2).
port_connects_to_channel(5, 3).
port_connects_to_channel(7, 3).
port_connects_to_channel(8, 4).
port_connects_to_channel(9, 5).
port_connects_to_channel(10, 5).
port_connects_to_channel(6, 6).
port_connects_to_channel(11, 6).
port_connects_to_channel(8, 7).
port_connects_to_channel(4, 8).
port_connects_to_channel(12, 9).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(2, 2).
inflow_connects_to_channel(1, 4).
inflow_connects_to_channel(1, 7).
inflow_connects_to_channel(2, 8).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(3, 1).
outflow_connects_to_channel(3, 9).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
uri_variable(1, 'dir_anx', 1).
uri_variable(2, 'dir_goal', 3).
uri_variable(3, 'dir_anx', 8).
uri_variable(4, 'dir_goal', 12).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).
